package co.com.example.automation.utils;

import co.com.example.automation.helpers.Properties;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import lombok.Getter;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class ExtentReportManager {
    private static ExtentReports extent;
    @Getter
    private static ExtentTest test;
    public static final String REPORT_PATH = "reports/";
    private static final String NAME_REPORT = "ExtentReport";

    /**
     * Initializes an ExtentReports instance with a SparkReporter.
     *
     * @return An initialized ExtentReports instance.
     */
    public static ExtentReports initializeReport() {
        ExtentSparkReporter htmlReporter = new ExtentSparkReporter(REPORT_PATH + NAME_REPORT + dateFormat() + ".html");
        htmlReporter.config().setTheme(Theme.STANDARD);
        htmlReporter.config().setDocumentTitle("Automated Test Report");
        htmlReporter.config().setEncoding("utf-8");
        htmlReporter.config().setReportName("Automated Test Results");
        extent = new ExtentReports();
        extent.attachReporter(htmlReporter);
        extent.setSystemInfo("OS", Properties.getProperty("OS"));
        extent.setSystemInfo("Environment", Properties.getProperty("Environment"));
        extent.setSystemInfo("User", Properties.getProperty("User"));
        return extent;
    }

    /**
     * Creates an ExtentTest instance with a given name and description.
     *
     * @param testName    The name of the test.
     * @param description A brief description of the test.
     * @return The created ExtentTest instance.
     */
    public static ExtentTest createTest(String testName, String description) {
        test = createTest(testName, description);
        return test;
    }

    /**
     * Flushes the ExtentReports instance to generate the report.
     * This method ensures that the report is generated by flushing the ExtentReports instance.
     * If the extent instance is null, it does nothing.
     */
    public static void flushReport() {
        if (extent != null) {
            extent.flush();
        }
    }

    /**
     * Returns the current date and time in the format "yyyy-MM-dd_HH-mm-ss".
     * <p>
     * This method is used to generate a unique timestamp for report naming or other purposes.
     *
     * @return A string representing the current date and time in the specified format.
     */
    private static String dateFormat() {
        LocalDateTime localDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
        return localDateTime.format(formatter);
    }
}
